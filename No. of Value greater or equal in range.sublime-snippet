<snippet>
	<content><![CDATA[
struct SegTree{
	int n;
	vector<vector<long long>>tree;

	SegTree(int n){
		this->n = n;
		tree.assign(4*n+1, vector<long long>({}));
	}

	SegTree(vector<long long>&arr): SegTree(arr.size()){
		buildTree(arr, 1, 0, n-1);
	}

	void merge(vector<long long>&v, vector<long long>&v1, vector<long long>&v2){
		int i = 0, j = 0;
		while (i<v1.size() and j<v2.size()) {
			if (v1[i] <= v2[j]) {
				v.push_back(v1[i]);
				i++;
			}
			else {
				v.push_back(v2[j]);
				j++;
			}
		}
		for (int k = i; k < v1.size(); k++) v.push_back(v1[k]);
		for (int k = j; k < v2.size(); k++) v.push_back(v2[k]);
	}

	void buildTree(vector<long long>&arr, int index, int s, int e){
		if (s == e) {
			tree[index].push_back(arr[s]);
			return;
		}

		int mid = (s + e) / 2;
		buildTree(arr, 2 * index, s, mid);
		buildTree(arr, 2 * index + 1, mid + 1, e);

		merge(tree[index], tree[2 * index], tree[2 * index + 1]);
	}

	//Return No. of elements greater than equal to 'k' from 'L' to 'R'
	int query(int index, int s, int e, int l, int r, int k){
		if (r < s || l > e) return 0;
		if (s >= l && e <= r) {
			return (tree[index].size() - (lower_bound(tree[index].begin(), tree[index].end(), k) - tree[index].begin()));
		}

		int mid = (s + e) / 2;
		return (query(2*index, s, mid, l, r, k) + query(2*index+1, mid+1, e, l, r, k));
	}

	int getQuery(int l, int r, int k){
		return query(1, 0, n-1, l, r, k);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegTree 3</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
