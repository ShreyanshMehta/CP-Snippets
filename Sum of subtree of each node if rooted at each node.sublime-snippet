<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

#define   fi(a,b) for(int i=a;i<b;i++)
#define   fj(a,b) for(int j=a;j<b;j++)
#define   ff first
#define   ss second
#define   ll long long
#define   ld long double
#define   ull unsigned long long
#define   bp(x) __builtin_popcount(x)
#define   pr(x) for(auto it: x) cout<<it<<" "; cout<<endl;
#define   getMax(x) max_element(x.begin(),x.end())
#define   getMin(x) min_element(x.begin(),x.end())
#define   endl "\n"
typedef   vector<int> vi;
typedef   vector< pair<int,int> > vii;
typedef   vector<long long> vl;
typedef   pair<int,int> pii;
typedef   pair<ll,ll> pll;
typedef   vector< pair<ll,ll> > vll;
//int dx[]={1,0,-1,0};
//int dy[]={0,1,0,-1};
//int dx[]={-1,0,1,1,1,0,-1,-1};
//int dy[]={-1,-1,-1,0,1,1,1,0};

const int N=2e5+10;
vi adj[N];
ll siz[N];
ll dp[N];
ll ans=0;

void calsiz(int node,int pre){
  siz[node]=1;
  for(auto it: adj[node]){
    if(it==pre) continue;
    calsiz(it,node);
    siz[node]+=siz[it];
  }
}

void caldp(int node,int pre){
  dp[node]+=siz[node];
  for(auto it: adj[node]){
    if(it==pre) continue;
    caldp(it,node);
    dp[node]+=dp[it];
  }
}

void dfs(int node,int pre){
  ans=max(ans,dp[node]);
  for(auto it: adj[node]){
    if(it==pre) continue;
    dp[node]-=dp[it]+siz[it];
    siz[node]-=siz[it];
    siz[it]+=siz[node];
    dp[it]+=dp[node]+siz[node];
    dfs(it,node);
    dp[it]-=siz[node]+dp[node];
    siz[it]-=siz[node];
    siz[node]+=siz[it];
    dp[node]+=dp[it]+siz[it];
  }
}

void nikal_pehli_fursat_mai(){
  int n;
  cin>>n;
  fi(0,n-1){
    int u,v;
    cin>>u>>v;
    u--;
    v--;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  calsiz(0,-1);
  caldp(0,-1);
  dfs(0,-1);
  cout<<ans<<endl;
}

int main(){
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif
  ios::sync_with_stdio(0);
  cin.tie(0);
  int tc=1; 
  //cin>>tc;
  while(tc--){
    nikal_pehli_fursat_mai();
  }
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rerooting subtreeSum</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
