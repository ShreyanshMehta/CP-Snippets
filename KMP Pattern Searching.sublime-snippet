<snippet>
	<content><![CDATA[
vector<int> prefix_function(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
		
void computeLPSArray(string pat, int M, int* lps) { 
	// length of the previous longest prefix suffix 
	int len = 0; 
	lps[0] = 0; // lps[0] is always 0  
	int i = 1; 
	while (i < M) { 
		if (pat[i] == pat[len]) { 
		    len++; 
		    lps[i] = len; 
		    i++; 
		} 
		else{
		    if (len != 0) { 
		        len = lps[len - 1]; 
		    } 
		    else{ 
		        lps[i] = 0; 
		        i++; 
		    } 
		} 
	} 
} 

void KMPSearch(string pat, string txt) { 
    int M = pat.size(); 
    int N = txt.size();  
    int lps[M]; 
    computeLPSArray(pat, M, lps); 
  
    int i = 0; // index for txt[] 
    int j = 0; // index for pat[] 
    while (i < N) { 
        if (pat[j] == txt[i]) { 
            j++; 
            i++; 
        } 
        if (j == M) { 
            printf("Found pattern at index %d ", i - j); 
            j = lps[j - 1]; 
        } 
        else if (i < N && pat[j] != txt[i]) {
            if (j != 0) 
                j = lps[j - 1]; 
            else
                i = i + 1; 
        } 
    } 
} 
  
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kmp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
