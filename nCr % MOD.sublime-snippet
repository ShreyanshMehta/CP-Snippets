<snippet>
	<content><![CDATA[
const int N = 1e6+10;

const int MOD = 1e9+7;

ll fac[N], modInv[N];

long long power(long long x, long long y) { 
    long long res = 1;
    x = x % MOD;
    while (y > 0) { 
        if (y & 1) 
            res = (res*x) % MOD; 
        y = y>>1;
        x = (x*x) % MOD; 
    } 
    return res; 
}

long long modInverse(ll x){
  return power(x, MOD-2);
}

long long modAdd(long long a, long long b){
  return (a%MOD + b%MOD + 2*MOD)%MOD;
}

long long modMult(long long a,long long b){
  return (a%MOD * b%MOD) % MOD;
}

long long modDiv(long long a,long long b){
  return (a%MOD * modInverse(b)) % MOD;
}

ll nCrModP(ll n, ll r) { 
    if (r==0) return 1; 
    return ((fac[n] * modInv[r]) % MOD * modInv[n-r]) % MOD; 
}

void compute() {
    fac[0] = 1; 
    modInv[0] = 1;
    for(ll i=1; i<N; i++) {
        fac[i] = (fac[i-1] * i) % MOD ; 
        modInv[i] = modInverse(fac[i]);
    }
}

]]></content>
	<tabTrigger>ncrmodp</tabTrigger>
</snippet>
